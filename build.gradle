plugins {
    id "checkstyle"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.springframework.boot" version "3.5.6"
    id "com.github.ben-manes.versions" version "0.53.0"
    id "java-library"
    id "maven-publish"
}

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group = "uk.gov.hmcts.reform"
version = buildNumber

ext {
    springCloudVersion = "2024.0.3"
    springFrameworkBootVersion = "3.5.6"
    lombokVersion = "1.18.42"
    logbackVersion = "1.5.20"
    reformJavaLoggingVersion = "6.1.9"
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m"].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = "10.17.0"
    configDirectory = file("${rootProject.projectDir}/config/checkstyle")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ["-parameters", "-Xlint:deprecation"]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1"}
}

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version
        )
    }
}

tasks.register("printVersion") {
    doLast {
        print project.version
    }
}

def gitRepo = "https://github.com/hmcts/fees-java-client"

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    functionalTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register("functionalTest", Test) {
    description = "Runs functional tests."
    group = "verification"
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

dependencies {
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:4.3.0"
    implementation 'org.apache.commons:commons-lang3:3.19.0'
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springFrameworkBootVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:2.18.2"
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.18.2"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.18.2"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "ch.qos.logback:logback-core:${logbackVersion}"
    implementation "com.github.hmcts.java-logging:logging:${reformJavaLoggingVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springFrameworkBootVersion}"
    testImplementation "ru.lanwen.wiremock:wiremock-junit5:1.3.0"
    testImplementation "io.github.openfeign:feign-jackson:13.6"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock:4.1.5"

    functionalTestImplementation "io.github.openfeign:feign-jackson:13.6"
    functionalTestCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    functionalTestAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

publishing {
    publications {
        create("Main", MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = "fees-java-client"
            version = project.version

            pom {
                name = "Fees java client"
                description = "Client library for communicating with fees api"
                url = gitRepo
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }
                scm {
                    url = gitRepo
                }
            }
        }
    }
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}